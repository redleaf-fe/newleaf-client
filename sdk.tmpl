(function (window, undefined) {
  // defines
  var logMethod = {
    xhr: sendXhr,
    img: sendImg,
    beacon: sendBeacon,
  };

  var cache = {};
  var lcName = '${lcName || '__newleaf_log_cache__'}';
  var lc = window.localStorage || {
    setItem: function (name, val) {
      cache[name] = val;
    },
    getItem: function (name) {
      return cache[name];
    },
    removeItem: function () {
      delete cache[name];
    }
  };

  // error
  window.addEventListener('error', function (e) {
    var _e$error = e.error,
        message = _e$error.message,
        stack = _e$error.stack;

    newleaf.log({
      content: JSON.stringify({
        message,
        stack
      }),
      type: 'error'
    });
  });

  window.addEventListener('unhandledrejection', function (e) {
    var _e$reason = e.reason,
        message = _e$reason.message,
        stack = _e$reason.stack;

    newleaf.log({
      content: JSON.stringify({
        message,
        stack
      }),
      type: 'error'
    });
  });

  // route
  function hackHistory(type) {
    var source = window.history[type];
    return function () {
      var event = new Event(type);
      event._args = arguments;
      window.dispatchEvent(event);
      var rewrite = source.apply(this, arguments);
      return rewrite;
    };
  }

  window.history.pushState = hackHistory('pushState');
  window.history.replaceState = hackHistory('replaceState');

  window.addEventListener('pushState', function (e) {
    newleaf.log({
      content: e._args[2] || '',
      type: 'route'
    });
  }, true);
  window.addEventListener('replaceState', function (e) {
    newleaf.log({
      content: e._args[2] || '',
      type: 'route'
    });
  }, true);
  window.addEventListener('hashchange', function (e) {
    newleaf.log({
      content: e.newURL,
      type: 'route'
    });
  }, true);

  // body
  function Newleaf() {
    this.appId = '${appId}';
    this.logUrl = '${logUrl}';
    if (navigator.sendBeacon) {
      this.method = 'beacon';
    } else {
      this.method = 'img';
    }
  }

  Newleaf.prototype.log = function (_ref) {
    var _ref$type = _ref.type,
        type = _ref$type === void 0 ? "log" : _ref$type,
        _ref$content = _ref.content,
        content = _ref$content === void 0 ? "" : _ref$content,
        method = _ref.method,
        logUrl = _ref.logUrl,
        appId = _ref.appId,
        _ref$cache = _ref.cache,
        cache = _ref$cache === void 0 ? true : _ref$cache;
    // 有内容才发送
    if (content) {
      // 默认缓存再发送
      cache ? save({
        method: method || this.method,
        logUrl: logUrl || this.logUrl,
        appId: appId || this.appId,
        content,
        type
      }) : logMethod[method || this.method](logUrl || this.logUrl, {
        appId: appId || this.appId,
        content,
        type
      });
    }
  };

  if (window.newleaf) {
    throw new Error('variable name \`newleaf\` has existed');
  } else {
    window.newleaf = new Newleaf();
  }

  // utils
  function save(info) {
    var data = JSON.parse(lc.getItem(lcName) || '[]');
    data.push(info);
    lc.setItem(lcName, JSON.stringify(data));
  }

  function sendBeacon(url, data) {
    navigator.sendBeacon(url, new URLSearchParams(data).toString());
  }

  function sendXhr(url, data) {
    var xhr = new XMLHttpRequest();
    xhr.open('POST', url);
    xhr.setRequestHeader('Content-Type', 'application/json');
    xhr.send(JSON.stringify(data));
  }

  function sendImg(url, data) {
    var img = new Image();
    img.src = url + '?' + new URLSearchParams(data).toString();
  }

  function getRandTime() {
    return 5 + Math.floor(Math.random() * 10);
  }

  function send() {
    var cnt = 0;

    function sendData() {
      var data = JSON.parse(lc.getItem(lcName) || '[]');
      var info = data.pop();
      if (info) {
        logMethod[info.method](info.logUrl, info);
      }
      lc.setItem(lcName, JSON.stringify(data));
      cnt++;

      if (cnt >= 4) {
        setTimeout(send, getRandTime());
      } else {
        setTimeout(sendData, 800);
      }
    }

    setTimeout(sendData, 800);
  }

  setTimeout(send, getRandTime());

})(window);
